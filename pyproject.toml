[tool.poetry]
name = "pyanypay"
version = "0.1.0"
description = "Universal library for AnyPay API"
authors = ["FeeeeK <26704473+FeeeeK@users.noreply.github.com>"]
license = "MIT"
readme = "README.md"
homepage = "https://github.com/FeeeeK/pyAnyPay"
repository = "https://github.com/FeeeeK/pyAnyPay"
keywords = [
  "async",
  "asyncio",
  "anypay",
  "anypay-api",
  "anypay-python",
  "pyanypay",
]
classifiers = [
  "Environment :: Console",
  "Intended Audience :: Developers",
  "License :: OSI Approved :: MIT License",
  "Programming Language :: Python :: 3.8",
  "Programming Language :: Python :: 3.9",
  "Programming Language :: Python :: 3.10",
  "Topic :: Software Development :: Libraries :: Python Modules",
  "Topic :: Software Development :: Quality Assurance",
  "Typing :: Typed",
]
exclude = ["**/tests/*", "**/test_*"]

[tool.poetry.urls]
"Bug Tracker" = "https://github.com/FeeeeK/pyAnyPay/issues"

[tool.poetry.dependencies]
python = "^3.8"
aiohttp = "^3.8.4"
msgspec = "0.17.0"

[tool.poetry.group.dev.dependencies]
# Lint
black = "^23.0.1"
mypy = "^1.0.1"
mypy-extensions = "^1.0.0"
ruff = ">=0.0.251,<0.0.286"

[build-system]
requires = ["poetry-core>=1.0.0"]
build-backend = "poetry.core.masonry.api"


[tool.pytest.ini_options]
asyncio_mode = "auto"


[tool.mypy]
python_version = 3.8
ignore_missing_imports = true
warn_no_return = false
warn_return_any = false
warn_unused_configs = true

[[tool.mypy.overrides]]
module = "*.tests.*"
ignore_errors = true


[tool.black]
line-length = 99
target-version = ['py37']

[tool.ruff]
line-length = 99
respect-gitignore = true
ignore = [
  # "E203",  # whitespace before ':' (black)
  "E501",    # line too long
  # "W503",  # line break before binary operator (black)
  # "W504",  # line break after binary operator (black)
  "B905",    # `zip()` without an explicit `strict=` parameter (python3.10+ only)
  "PLR0913", # Too many arguments to function call
  "A003",    # Class attribute builtin name shadowing
  "N818",    # Exception should be named with an Error suffix
  "PGH003",  # Use specific rule codes when ignoring type issues
  "ARG002",  # Unused method argument
  "RUF001",  # String contains ambiguous unicode character
  "RUF002",  # Docstring contains ambiguous unicode character
  "RUF003",  # Comment contains ambiguous unicode character

]

select = [
    "PL",    # pylint
    "F",     # pyflakes
    "E",     # pycodestyle errors
    "W",     # pycodestyle warnings
    "C90",   # mccabe
    "I",     # isort
    "N",     # pep8-naming
    "YTT",   # flake8-2020
    "S",     # flake8-bandit
    "B",     # flake8-bugbear
    "A",     # flake8-builtins
    "C4",    # flake8-comprehensions
    "T10",   # flake8-debugger
    # "ANN", # flake8-annotations
    # "BLE", # flake8-blind-except
    # "FBT", # flake8-boolean-trap
    # "COM", # flake8-commas
    # "DTZ", # flake8-datetimez
    # "DJ",  # flake8-Django
    # "EM",  # flake8-errmsg
    "EXE",   # flake8-executable
    "ISC",   # flake8-implicit-str-concat
    "ICN",   # flake8-import-conventions
    "G",     # flake8-logging-format
    # "INP", # flake8-no-pep420
    "PIE",   # flake8-pie
    "T20",   # flake8-print
    # "PYI", # flake8-pyi
    "PT",    # flake8-pytest-style
    # "Q",   # flake8-quotes
    # "RET", # flake8-return
    "SIM",   # flake8-simplify
    "TID",   # flake8-tidy-imports
    "TCH",   # flake8-type-checking
    "ARG",   # flake8-unused-arguments
    # "PTH", # flake8-use-pathlib
    # "ERA", # flake8-eradicate
    # "PD",  # pandas-vet
    "PGH",   # pygrep-hooks
    # "TRY", # tryceratops
    "RSE",   # flake8-raise
    # "SLF", # flake8-self
    "RUF",   # ruff
]

[tool.ruff.per-file-ignores]
"tests/**.py" = [
  "S101",    # Use of assert detected
  "PLR2004", # Magic value used in comparison
  "S106",    # Possible hardcoded password
  "ARG001",  # Unused function argument
  "ARG005",  # Unused lambda argument
]

[tool.ruff.flake8-type-checking]
exempt-modules = ["typing_extensions", "typing"]
